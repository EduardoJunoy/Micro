;EXAMEN PRÁCTICA 4
;DISEÑAR UN PROGRAMA RESIDENTE QUE INSTALE UN VECTOR EN LA INT 61H, PROPORCIONANDO SERVICIOS EN AH = 13H,
;QUE CONSISTIRÁ EN ELIMINAR LAS VOCALES DE UN STRING PROPORCIONADO. 
;LAS CADENAS ESTARÁN EN DS:DX Y TERMINARÁN EN $.

;Programa 1: P4A2.asm
;Escribir en ensamblador un programa (.COM) que implemente una rutina de servicio a la interrupción 62h, que ofrezca los servicios especificados anteriormente.
;Cuando se ejecute (no ES necesario parámetros) instala el driver si no lo ha instalado antes. En caso contrario, desinstala el driver.

;DEFINIMOS EL ORIGEN DEL SEGMENTO DE CÓDIGO
CODIGO SEGMENT
ASSUME CS : CODIGO
ORG 256

INICIO: JMP COMIENZO

;VARIABLES GLOBALES
INST DB "Instalado.", '$'
DESINST DB "Desinstalado.", '$'
CADENA DB "Introduce una cadena: ", '$'
SALTOLINEA DB 13, 10, '$'
CADENA2 DB "La cadena sin vocales es: ", '$'
NOMBRE DB 80 DUP (?)

COMIENZO:	
	MOV SI, 80H
	MOV CX, 0
	
;COMPRUEBA SI EL VECTOR ESTÁ INSTALADO
	MOV CL, [SI]
	CMP CX, 0
	CALL COMP_INSTALACION
	
	MOV AX, 4C00H
	INT 21H

RSI PROC FAR

; PUSH DE REGISTROS MODIFICADOS
push DS DI DX BX CX AX

CMP AH, 13H
JNE FIN1

MOV CL, DS:BX[1]
MOV DI, 2

;IMPRESIÓN DE LA CADENA
IMPRIME:
MOV DL, DS:BX[DI]
CMP DL, 'A'
JE NO_IMPRIME
CMP DL, 'A'
JE NO_IMPRIME
CMP DL, 'E'
JE NO_IMPRIME
CMP DL, 'I'
JE NO_IMPRIME
CMP DL, 'O'
JE NO_IMPRIME
CMP DL, 'U'
JE NO_IMPRIME
CMP DL, 'a'
JE NO_IMPRIME
CMP DL, 'e'
JE NO_IMPRIME
CMP DL, 'i'
JE NO_IMPRIME
CMP DL, 'o'
JE NO_IMPRIME
CMP DL, 'u'
JE NO_IMPRIME
MOV AH, 2
INT 21H
;SALTA UNA POSICIÓN PARA NO IMPRIMIR EL CARACTER
NO_IMPRIME:
INC DI
LOOP IMPRIME
JMP FIN1

; POP DE REGISTROS MODIFICADOS
FIN1:
POP AX CX BX DX DI DS

IRET
RSI ENDP

INSTALAR PROC
MOV AX, 0
MOV ES, AX
MOV AX, OFFSET RSI
MOV BX, CS
CLI
MOV ES:[ 61h*4 ], AX
MOV ES:[ 61h*4+2 ], BX
STI
MOV dx, OFFSET INSTALAR
INT 27h ; Acaba y deja residente; PSP, variables y rutina RSI.
RET
INSTALAR ENDP

DESINSTALAR PROC
PUSH AX BX CX DS ES
MOV CX, 0
MOV DS, CX ; Segmento de vectores interrupción
MOV ES, DS:[ 61h*4+2 ] ; Lee segmento de RSI
MOV BX, ES:[ 2Ch ] ; Lee segmento de entorno del PSP de RSI
MOV AH, 49h
INT 21h ; Libera segmento de RSI (ES)
MOV ES, BX
INT 21h ; Libera segmento de variables de entorno de RSI
; Pone a cero vector de interrupción 40h
CLI
MOV DS:[ 61h*4 ], CX ; CX = 0
MOV DS:[ 61h*4+2 ], CX
STI
POP ES DS CX BX AX
RET
DESINSTALAR ENDP

COMP_INSTALACION PROC 
	MOV AX, 0
	MOV ES, AX
COMPROBAR_61:	

	MOV AX, ES:[61H*4]
	MOV BX, ES:[61H*4+2]
	CMP AX, 0
	JNE INSTALADO_61
	CMP BX, 0
	JNE INSTALADO_61
	
	MOV AH, 9
	MOV DX, OFFSET INST
	INT 21H
	CALL INSTALAR
	RET

INSTALADO_61:
	MOV AH, 9
	MOV DX, OFFSET DESINST
	INT 21H
	CALL DESINSTALAR

COMP_INSTALACION ENDP
	
CODIGO ENDS
END INICIO